ZVSE2
; Author:   Archer30 and daemon_n
; Engine:   ERM 2.0+
; Requires: ERA 3.3+, Era Erm Framework

; Creature damages all enemies adjacent to the tiles it walks through. Damage depends on stack size. Won't work on flyers (they do now).
; This script works for walking units only
; The damage dealing to wide unit is 50% of the normal damage (as wide unit is usually tankier)


!?FU(dal_CheckMonHasDamagingMovementDamage);
!#VA(mon:x) (result:x);

!!VR(result):S0;
; ========================== TESTING ==========================
!!VR(result)&(mon)=(MON_CENTAUR_CAPTAIN):S5;
!!VR(result)&(mon)=(MON_TITAN):S5;
; ======================== END TESTING ========================

!?FU(dal_CreateERMHook);
!#VA(hook:x);

!!SN:E(hook)/1/4464284/(dal_OnStackMakesStep); // hook in "while" loop of the walking stacks each HEX passed;
!!SN:E(hook)/1/4463326/(dal_HOOK_BeforeStackAttackMelee); [Trigger right before melee attack, obviously before retaliation]

; Reset variables
!?FU(OnSetupBattlefield);
!!SN:Mi^dal_DamagingMovementPosList^;
!!VRi^dal_DamagingMovementPosList^:S0;

; Set up an array at the start of moving
!?FU(OnBeforeBattleAction);
!!BG:A?(action:y);

!!if|(action)=(BATTLE_ACTION_WALK)/(action)=(BATTLE_ACTION_WALK_AND_ATTACK);
  !!BMi^battle_acting_stack^:T?(type:y);
  !!FU(dal_CheckMonHasDamagingMovementDamage):P(type)/?(result:y);

  !!if&(result)>0;
    !!SN:Mi^dal_DamagingMovementPosList^;
    !!FU(NewIntArray):P?i^dal_DamagingMovementPosList^/(M_TEMP);

    ; Store the position to be checked later whether the caster has moved
    !!BMi^battle_acting_stack^:P?i^DamagingMovementOrigPos^;
  !!en;
!!en;

; Store every coordinates the caster passes by
!?FU(dal_OnStackMakesStep)&i^dal_DamagingMovementPosList^;
!#VA(hook:x);

!!UN:C(hook:x)/(STRUCT_HOOK_CONTEXT_EAX)/4/?(hexToGo:y);
!!UN:C(COMBAT_MANAGER)/4/?(cmbMgr:y);

!!re i/0/5;
  !!VR(offset:y):S6 *(hexToGo) +i *2 +78952;
  !!UN:C(cmbMgr)/(offset)/2/?(adjhex:y);
  !!IF:M^%(adjhex)^;
  !!FU(Array_Push):Pi^dal_DamagingMovementPosList^/(adjhex);
!!en;

*!UN:C(address)/(STRUCT_HOOK_CONTEXT_ESI)/4/?(stackPtr:y);
*!UN:C(stackPtr)/244/4/?(side:y) C(stackPtr)/248/4/?(sId:y);
*!VR(stackId:y):S(side) *(BATTLE_STACKS_PER_SIDE) +(sId);

; Check if any stack is adjacent to the movement path
; Walk
!?FU(OnBattleActionEnd)&i^dal_DamagingMovementPosList^;
!!BG:A?(action:y);
!!FU(dal_damagineMovementMain)&(action)=(BATTLE_ACTION_WALK):P;

; Walk and attack
4463326
!?FU(dal_HOOK_BeforeStackAttackMelee)&i^dal_DamagingMovementPosList^;
!!FU(dal_damagineMovementMain):P;

!?FU(dal_damagineMovementMain);
!!BMi^battle_acting_stack^:N?(num:y);

!!if&(num)>0;
  ; Only when the caster moves
  !!BMi^battle_acting_stack^:P?(currPos:y);

  !!if&i^DamagingMovementOrigPos^<>(currPos);
    !!VR(hasMoved:y):S(FALSE);

    ; Check if the unit is wide
    !!BMi^battle_acting_stack^:F?(flags:y);
    !!VR(isWide:y):S(flags) &(MON_FLAG_WIDE);

    ; If it is wide, make sure it really moved, not just turning around
    !!if&(isWide);
      !!if&i^battle_acting_side^=(BATTLE_LEFT);
        !!VR(secPos:y):Si^DamagingMovementOrigPos^ +1;
      !!el;
        !!VR(secPos):Si^DamagingMovementOrigPos^ -1;
      !!en;

      !!VR(hasMoved)&(currPos)<>(secPos):S(TRUE);
    !!el;
      !!VR(hasMoved):S(TRUE);
    !!en;

    ; If it moves, let the fun begin!
    !!if&(hasMoved);
      ; Add in the starting and ending position of the moving stack
      !!re i/0/5;
        *!FU(dal_GetAdjacentPos):Pi^DamagingMovementOrigPos^/i/?(pos1:y);
        !!FU(dal_GetAdjacentPos):P(currPos)/i/?(pos2:y);
        !!FU(Array_Push):Pi^dal_DamagingMovementPosList^/(pos2);
      !!en;

      ; Add in the second positon of the ending positon if the stack is wide
      !!if&(isWide);
        !!re i/0/1;
          !!if&i=0;
            !!VR(secPos:y):S(currPos) -1;
          !!el;
            !!VR(secPos:y):S(currPos) +1;
          !!en;

          !!BU&(secPos)>0/(secPos)<186:E(secPos)/?(stack:y);

          !!if&(stack)=i^battle_acting_stack^;
            !!re j/0/5;
              !!FU(dal_GetAdjacentPos):P(secPos)/j/?(pos:y);
              !!FU(Array_Push):Pi^dal_DamagingMovementPosList^/(pos);
            !!en;
            
            !!br;
          !!en;
        !!en;
      !!en;

      !!FU(Array_SortedUnique):Pi^dal_DamagingMovementPosList^;
      !!SN:Mi^dal_DamagingMovementPosList^/?(size:y);
      !!FU(NewIntArray):P?(affectedStacksList:y);

      !!re i/0/(size)/1/-1;
        ; Check the adjacent hexes of every hexes the caster walked through
        !!SN:Mi^dal_DamagingMovementPosList^/i/?(pos:y);
        !!co|(pos)<1/(pos)>185;

        !!BU:E(pos)/?(stack:y);
        !!FU(Array_Push)&(stack)>(NO_STACK):P(affectedStacksList)/(stack);
      !!en;

      !!FU(Array_SortedUnique):P(affectedStacksList);
      !!SN:M(affectedStacksList)/?(size:y);

      !!if&(size)>0;
        ; Get the damage would be done by the damaging movement unit
        !!BMi^battle_acting_stack^:T?(type:y) N?(actNum:y);
        !!FU(dal_CheckMonHasDamagingMovementDamage):P(type)/?(damage:y); [Get the damage per unit of the unit just moved]
        !!VR(normDamage:y):S(damage) *(actNum); [Damage for single hex unit]
        !!VR(wideDamage:y):S(normDamage) :2; [1/2 damage to wide units]

        ; Initialise the variable for checking whether damage is inclicted to at least one unit
        !!VR(damageInflicted:y)&i^battle_isVisible^:S(FALSE);

        ; Check out if units are flyers or wide
        !!re i/0/(size)/1/-1;
          !!SN:M(affectedStacksList)/i/?(targetStack:y);
          !!BM(targetStack):I?(side:y);
          !!co&(side)=i^battle_acting_side^;

          !!BM(targetStack):F?(flags:y);
          *!VR(isFlyer:y):S(flags) &(MON_FLAG_FLYER);
          *!co&(isFlyer);                 [Flying units are not affected]
          
          !!VR(damageInflicted)&i^battle_isVisible^:S(TRUE);

          ; Different damage depending on whether the target is wide
          !!VR(isWide:y):S(flags) &(MON_FLAG_WIDE);
          
          !!if&(isWide);
            !!BM(targetStack):K(wideDamage);
          !!el;
            !!BM(targetStack):K(normDamage);
          !!en;
        !!en;

        !!if&i^battle_isVisible^/(damageInflicted);
          !!SN:D;

          ; Battle log
          !!VR(isPlural:y):S(num) -1 B;
          !!SN:H^monname^/(type)/(isPlural)/?(monName:z);
          !!SN:T^dal.str.damagingMovement%(isPlural)^/?(battleLog:z)/^mon^/(monName)/^dmg^/(normDamage);
          !!MM:S(battleLog);
        !!en;
      !!en;
    !!en;
  !!en;
!!en;

; Release the array and variables
!!SN:Mi^dal_DamagingMovementPosList^;
!!VRi^dal_DamagingMovementPosList^:S0;
!!VRi^DamagingMovementOrigPos^:S0;

!?FU(dal_GetAdjacentPos);
!#VA(pos:x) (direction:x) (result:x);

!!VR(isOddRow:y):S(pos) :17 %2;

!!VR(firstPos:y)&(isOddRow):S(pos) -17;
!!VR(firstPos)&(isOddRow)<>(TRUE):S(pos) -16;

!!if&(direction)=0;
  !!VR(result):S(firstPos);
!!el&(direction)=1;
  !!VR(result):S(pos) +1;
!!el&(direction)=2;
  !!VR(result):S(firstPos) +34;
!!el&(direction)=3;
  !!VR(result):S(firstPos) +33;
!!el&(direction)=4;
  !!VR(result):S(pos) -1;
!!el;
  !!VR(result):S(firstPos) -1;
!!en;
