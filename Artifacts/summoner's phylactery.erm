ZVSE2
; Author:   Archer30
; Engine:   ERM 2.0+
; Requires: ERA 3.3+

; Allow the #166 artifact to summon targeted monsters on battle start
; The script is not compatible with Advanced Classes Mod


; ============== SETTINGS ==============
!#VRi^summart_art^:S166;                 [Artifact ID of the Ultimate Phylactery]
!#VRi^summart_mon^:S(MON_LICH);          [Monster to be summoned]
!#VRi^summart_numPerPower^:S1120;        [Quantity to be summoned per hero's power (multiplied by 100)]
; ============ END SETTINGS ============


!?FU(OnBattleRound)&i^battle_round^=0/i^Advanced_Classes_Mod_Active^<>(TRUE);
; Loop through left and right side
!!re i/(BATTLE_LEFT)/(BATTLE_RIGHT);
  ; Check if any hero has the targeted artifact
  !!if&i^battle_hero_%i^>(NO_HERO);
    !!VR(hero:y):S(HERO_SORSHA);
    !!HE(hero):A2/i^summart_art^/?(has:y)/?(equipped:y);

    ; Try to summon if the hero has the targeted art
    !!if&(equipped);
      ; Check if it is eligible to summon (if the stack count is fewer than 20)
      !!FU(summart_CheckIfEligibleToSummon):Pi/?(isEligible:y);

      !!if&(isEligible);
        !!VR(type:y):Si^summart_mon^;
        !!MA:X(type)/?(flags:y);
        !!VR(isWide:y):S(flags) &(MON_FLAG_WIDE);

        !!FU(summart_GetRandomPosition):Pi/(isWide)/?(randPos:y)/3;

        !!if&(randPos)>-1;
          ; Summon the stack and play sound
          !!SN&i^battle_isVisible^:P^SUMNELM^;

          ; Calculate the quantity of summoning
          !!HE(hero):Fd/d/?(pwr:y)/d;
          !!VR(num:y):S(pwr) *i^summart_num^ :100;
          
          !!BU:S(type)/(num)/(randPos)/i/-1/(TRUE);
          ; Add in the flag of summoning creature so the stack ID would be released after killed
          !!BU:E(randPos)/?(stack:y);
          !!BM(stack):Fd|(MON_FLAG_SUMMONED);
        !!en;
      !!en;
    !!en;
  !!en;
!!en;

!?FU(summart_CheckIfEligibleToSummon);
!#VA(side:x) (result:x);

!!VR(result):S(FALSE);

!!UN:C6919200/4/?(value:y);
!!VR(address:y):S(side) *4 +21692 +(value);
!!UN:C(address)/4/?(stackNum:y);

!!VR(result)&(stackNum)<21:S(TRUE);

!?FU(summart_GetRandomPosition);
!#VA(side:x) (isWide:x) (randPos:x) (maxColumn:x);

!!VR(randPos):S-1;

; Set max column to 15 (all the columns are allowed) if the parametre wasn't defined
!!FU:A?(numArgs:y);
!!VR(maxColumn)&(numArgs)<4:S15;

!!FU(NewIntArray):P?(validPosArray:y);

; Loop through all the positions and fill in the array for available ones
!!re (pos:y)/1/185;
  !!VR(isAvailPos:y):S(TRUE);
    !!FU(summart_CheckIfHexIsFree):P(side)/(pos)/(maxColumn)/?(isAvailPos);
  
  !!if&(isWide)/(isAvailPos);
    !!VR(secPos:y)&(side)=(BATTLE_LEFT):S(pos) +1;
    !!VR(secPos)&(side)=(BATTLE_RIGHT):S(pos) -1;
    !!FU(summart_CheckIfHexIsFree):P(side)/(secPos)/(maxColumn)/?(isAvailPos);
  !!en;
  
  !!FU(Array_Push)&(isAvailPos):P(validPosArray)/(pos);
!!en;

; Get a random valid position from the array
!!SN:M(validPosArray)/?(arraySize:y);

!!if&(arraySize)>=1;
  !!VR(lastIndex:y):S(arraySize)-1;
  !!VR(randPosPtr:y):R0/0/(lastIndex);
  !!SN:M(validPosArray)/(randPosPtr)/?(randPos);
!!en;

!?FU(summart_CheckIfHexIsFree);
!#VA(side:x) (pos:x) (maxColumn:x) (isAvailPos:x);

!!VR(isAvailPos):S(TRUE);

!!VR(realColumn:y):S(pos) %17;

; Get the column number to each side
!!if&(side)=(BATTLE_LEFT);
  !!VR(column:y):S(realColumn);
!!el;
  !!VR(column):S16 -(realColumn);
!!en;

; Store the position if it is not overlapped with a statck, on obstacles or reaches the max column limit
!!if&(column)>0/(column)<=(maxColumn);
  !!BU:E(pos)/?(stack:y) O(pos)/?(obstacleFlag:y);
  !!VR(isAvailPos)|(stack)>(NO_STACK)/(obstacleFlag)>0:S(FALSE);
!!el;
  !!VR(isAvailPos):S(FALSE);
!!en;
